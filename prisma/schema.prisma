generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String        @id @default(uuid())
  username         String        @unique
  email            String?       @unique
  image            String?
  firstName        String?
  lastName         String?
  bio              String?
  isActive         Boolean       @default(true)
  password         String
  securityQuestion String?
  securityAnswer   String?
  role             UserRole      @default(SK_OFFICIAL)
  officialType     OfficialType?
  committee        String?
  barangay         String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  lastActiveAt DateTime?

  systemLogs      SystemLogs[]
  projectReports  ProjectReports[]
  budgetReports   BudgetReports[]
  projectProposal ProjectProposal[]
  cbydp           CBYDP[]
  meetingAgenda   MeetingAgenda[]
  meetingMinutes  MeetingMinutes[]
  officials       Officials[]
}

enum OfficialType {
  CHAIRPERSON
  KAGAWAD
  TREASURER
  SECRETARY
}

enum UserRole {
  SK_FEDERATION
  LYDO
  SK_OFFICIAL
  ADMIN
}

model SystemLogs {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  details   String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])
}

model ProjectReports {
  id        String   @id @default(uuid())
  name      String
  fileSize  String
  fileType  String
  fileUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isArchived Boolean   @default(false)
  archivedAt DateTime?

  uploadedBy String
  user       User   @relation(fields: [uploadedBy], references: [id])
}

model BudgetReports {
  id        String   @id @default(uuid())
  name      String
  fileSize  String
  fileType  String
  fileUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isArchived Boolean   @default(false)
  archivedAt DateTime?

  uploadedBy String
  user       User   @relation(fields: [uploadedBy], references: [id])
}

model CBYDP {
  id        String   @id @default(uuid())
  name      String
  fileSize  String
  fileType  String
  fileUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isArchived Boolean   @default(false)
  archivedAt DateTime?

  uploadedBy String
  user       User   @relation(fields: [uploadedBy], references: [id])
}

model MeetingAgenda {
  id        String   @id @default(uuid())
  name      String
  fileSize  String
  fileType  String
  fileUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isArchived Boolean   @default(false)
  archivedAt DateTime?

  uploadedBy String
  user       User   @relation(fields: [uploadedBy], references: [id])
}

model MeetingMinutes {
  id        String   @id @default(uuid())
  name      String
  fileSize  String
  fileType  String
  fileUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isArchived Boolean   @default(false)
  archivedAt DateTime?

  uploadedBy String
  user       User   @relation(fields: [uploadedBy], references: [id])
}

model ProjectProposal {
  id          String   @id @default(uuid())
  title       String
  description String
  budget      Float
  fileUrl     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  isArchived Boolean   @default(false)
  archivedAt DateTime?

  status             String  @default("Pending") // Pending, Approved, Rejected
  reasonForRejection String?

  createdBy String
  user      User   @relation(fields: [createdBy], references: [id])
}

model Officials {
  id        String   @id @default(uuid())
  name      String
  position  String
  committee String?
  barangay  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Events {
  id          String   @id @default(uuid())
  name        String
  description String
  thumbnail   String
  barangay    String
  startDate   String
  endDate     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
